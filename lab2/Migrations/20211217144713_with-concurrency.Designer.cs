// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using lab1.Entities;

namespace lab1.Migrations
{
    [DbContext(typeof(LabContext))]
    [Migration("20211217144713_with-concurrency")]
    partial class withconcurrency
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 64)
                .HasAnnotation("ProductVersion", "5.0.13");

            modelBuilder.Entity("lab1.Entities.AcceptedEntry", b =>
                {
                    b.Property<DateTime>("ReportMonth")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("report_month");

                    b.Property<string>("UserName")
                        .HasColumnType("varchar(255)")
                        .HasColumnName("user_name");

                    b.Property<string>("ActivityCode")
                        .HasColumnType("varchar(255)")
                        .HasColumnName("activity_code");

                    b.Property<int>("Time")
                        .HasColumnType("int")
                        .HasColumnName("time");

                    b.Property<DateTime>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp(6)")
                        .HasColumnName("timestamp");

                    b.HasKey("ReportMonth", "UserName", "ActivityCode")
                        .HasName("pk_accepted_entries");

                    b.HasIndex("ActivityCode")
                        .HasDatabaseName("ix_accepted_entries_activity_code");

                    b.ToTable("accepted_entries");
                });

            modelBuilder.Entity("lab1.Entities.Activity", b =>
                {
                    b.Property<string>("ActivityCode")
                        .HasColumnType("varchar(255)")
                        .HasColumnName("activity_code");

                    b.Property<bool>("Active")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("active");

                    b.Property<string>("ActivityName")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("activity_name");

                    b.Property<int>("Budget")
                        .HasColumnType("int")
                        .HasColumnName("budget");

                    b.Property<string>("ManagerName")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasColumnName("manager_name");

                    b.HasKey("ActivityCode")
                        .HasName("pk_activities");

                    b.HasIndex("ManagerName")
                        .HasDatabaseName("ix_activities_manager_name");

                    b.ToTable("activities");
                });

            modelBuilder.Entity("lab1.Entities.Entry", b =>
                {
                    b.Property<DateTime>("ReportMonth")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("report_month");

                    b.Property<string>("UserName")
                        .HasColumnType("varchar(255)")
                        .HasColumnName("user_name");

                    b.Property<string>("ActivityCode")
                        .HasColumnType("varchar(255)")
                        .HasColumnName("activity_code");

                    b.Property<int>("EntryPid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("entry_pid");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("date");

                    b.Property<string>("Description")
                        .HasColumnType("longtext")
                        .HasColumnName("description");

                    b.Property<string>("SubactivityCode")
                        .HasColumnType("varchar(255)")
                        .HasColumnName("subactivity_code");

                    b.Property<int>("Time")
                        .HasColumnType("int")
                        .HasColumnName("time");

                    b.Property<DateTime>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp(6)")
                        .HasColumnName("timestamp");

                    b.HasKey("ReportMonth", "UserName", "ActivityCode", "EntryPid")
                        .HasName("pk_entries");

                    b.HasIndex("ActivityCode", "SubactivityCode")
                        .HasDatabaseName("ix_entries_activity_code_subactivity_code");

                    b.ToTable("entries");
                });

            modelBuilder.Entity("lab1.Entities.Report", b =>
                {
                    b.Property<DateTime>("ReportMonth")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("report_month");

                    b.Property<string>("UserName")
                        .HasColumnType("varchar(255)")
                        .HasColumnName("user_name");

                    b.Property<bool>("Frozen")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("frozen");

                    b.HasKey("ReportMonth", "UserName")
                        .HasName("pk_reports");

                    b.HasIndex("UserName")
                        .HasDatabaseName("ix_reports_user_name");

                    b.ToTable("reports");
                });

            modelBuilder.Entity("lab1.Entities.Subcode", b =>
                {
                    b.Property<string>("ActivityCode")
                        .HasColumnType("varchar(255)")
                        .HasColumnName("activity_code");

                    b.Property<string>("SubactivityCode")
                        .HasColumnType("varchar(255)")
                        .HasColumnName("subactivity_code");

                    b.HasKey("ActivityCode", "SubactivityCode")
                        .HasName("pk_subcodes");

                    b.ToTable("subcodes");
                });

            modelBuilder.Entity("lab1.Entities.User", b =>
                {
                    b.Property<string>("UserName")
                        .HasColumnType("varchar(255)")
                        .HasColumnName("user_name");

                    b.HasKey("UserName")
                        .HasName("pk_users");

                    b.ToTable("users");
                });

            modelBuilder.Entity("lab1.Entities.AcceptedEntry", b =>
                {
                    b.HasOne("lab1.Entities.Activity", "Activity")
                        .WithMany("AcceptedEntries")
                        .HasForeignKey("ActivityCode")
                        .HasConstraintName("fk_accepted_entries_activities_activity_code")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("lab1.Entities.Report", "Report")
                        .WithMany("AcceptedEntries")
                        .HasForeignKey("ReportMonth", "UserName")
                        .HasConstraintName("fk_accepted_entries_reports_report_month_user_name")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Activity");

                    b.Navigation("Report");
                });

            modelBuilder.Entity("lab1.Entities.Activity", b =>
                {
                    b.HasOne("lab1.Entities.User", "Manager")
                        .WithMany("Activities")
                        .HasForeignKey("ManagerName")
                        .HasConstraintName("fk_activities_users_manager_name")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Manager");
                });

            modelBuilder.Entity("lab1.Entities.Entry", b =>
                {
                    b.HasOne("lab1.Entities.Activity", "Activity")
                        .WithMany("Entries")
                        .HasForeignKey("ActivityCode")
                        .HasConstraintName("fk_entries_activities_activity_code1")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("lab1.Entities.Subcode", "Subcode")
                        .WithMany("Entries")
                        .HasForeignKey("ActivityCode", "SubactivityCode")
                        .HasConstraintName("fk_entries_subcodes_activity_code_subactivity_code");

                    b.HasOne("lab1.Entities.Report", "Report")
                        .WithMany("Entries")
                        .HasForeignKey("ReportMonth", "UserName")
                        .HasConstraintName("fk_entries_reports_report_month_user_name")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Activity");

                    b.Navigation("Report");

                    b.Navigation("Subcode");
                });

            modelBuilder.Entity("lab1.Entities.Report", b =>
                {
                    b.HasOne("lab1.Entities.User", "User")
                        .WithMany("Reports")
                        .HasForeignKey("UserName")
                        .HasConstraintName("fk_reports_users_user_name")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("lab1.Entities.Subcode", b =>
                {
                    b.HasOne("lab1.Entities.Activity", "Activity")
                        .WithMany("Subcodes")
                        .HasForeignKey("ActivityCode")
                        .HasConstraintName("fk_subcodes_activities_activity_code1")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Activity");
                });

            modelBuilder.Entity("lab1.Entities.Activity", b =>
                {
                    b.Navigation("AcceptedEntries");

                    b.Navigation("Entries");

                    b.Navigation("Subcodes");
                });

            modelBuilder.Entity("lab1.Entities.Report", b =>
                {
                    b.Navigation("AcceptedEntries");

                    b.Navigation("Entries");
                });

            modelBuilder.Entity("lab1.Entities.Subcode", b =>
                {
                    b.Navigation("Entries");
                });

            modelBuilder.Entity("lab1.Entities.User", b =>
                {
                    b.Navigation("Activities");

                    b.Navigation("Reports");
                });
#pragma warning restore 612, 618
        }
    }
}
